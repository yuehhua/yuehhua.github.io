<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dream Maker</title>
  
  <subtitle>Love Math, Science, Biology, Computer science</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuehhua.github.io/"/>
  <updated>2020-03-05T16:32:51.101Z</updated>
  <id>https://yuehhua.github.io/</id>
  
  <author>
    <name>Yueh-Hua Tu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>從 iterator 及 generator 到 iterable</title>
    <link href="https://yuehhua.github.io/2020/03/01/from-iterator-and-generator-to-iterable/"/>
    <id>https://yuehhua.github.io/2020/03/01/from-iterator-and-generator-to-iterable/</id>
    <published>2020-03-01T06:31:49.000Z</published>
    <updated>2020-03-05T16:32:51.101Z</updated>
    
    <content type="html"><![CDATA[<p>今天來跟大家介紹 iterator、generator 及 iterable 這三個東西。基本上，大家應該都有用過 for 迴圈，然而很多東西可以放在迴圈的 <code>in</code> 後方，這樣就可以將裡頭的元素一個一個取出來。但是這是怎做到的呢？</p><a id="more"></a><p>很基本的作法是去實作一個設計模式（design pattern）中的 iterator，假設我們要迭代一個陣列裡的元素，iterator 有別於陣列本身，是另外一個物件。Iterator 可以提供你一個介面，例如 <code>next()</code>，讓你可以取得陣列裡的下一個元素。</p><p>像這樣的方式很常見也很簡單可以實作，在 Julia 裡就像這樣：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mutable struct</span> ArrayIterator</span><br><span class="line">    array::<span class="built_in">Array</span></span><br><span class="line">    index::<span class="built_in">Int64</span></span><br><span class="line"></span><br><span class="line">    ArrayIterator(array::<span class="built_in">Array</span>) = new(array, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">has_next(iter::ArrayIterator) = (iter.index &lt; length(iter.array))</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> next(iter::ArrayIterator)</span><br><span class="line">    x = iter.array[iter.index]</span><br><span class="line">    iter.index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; v = collect(<span class="number">1</span>:<span class="number">2</span>:<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">julia&gt; iter = ArrayIterator(v);</span><br><span class="line"></span><br><span class="line">julia&gt; has_next(iter)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">julia&gt; next(iter)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">julia&gt; next(iter)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">julia&gt; has_next(iter)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>各位可以看到 iterator 一般都會實作 <code>has_next()</code> 及 <code>next()</code> 函式，是用來確認是否有下一個元素存在及取得下一個元素。Iterator 中會包含陣列本身，也就是想要迭代的集合本身，還有一個 <code>index</code> 會指向目前的元素，並在取得元素之後移往下一個。</p><p>Iterator 是一個物件，它需要一個已經存在的集合來作為它迭代的集合。這代表這個集合必須事先存在，如果這個集合很大，那就會佔去不少記憶體空間。有沒有什麼方法可以不需要集合就可以迭代的呢？Generator 是一個方式。</p><p>Generator，顧名思義，它會在你取得下一個元素的時候產生出來，並不會事先計算，所以集合也不會存在。Julia 的 generator 很好撰寫，如下：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = (i^<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>這就是一個會產生 1 到 10 數字的 generator。Generator 也可以被放到 for 迴圈裡被迭代，但唯一不同的是，它並不佔記憶體空間，只需要即時的計算即可。</p><p>Julia 目前提供的方式稱為 Iterable，只要有實作 <code>iterate()</code> 這個 API 的就稱為 Iterable。像以下例子：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Character</span><br><span class="line">    start::<span class="built_in">Char</span></span><br><span class="line">    length::<span class="built_in">Int</span></span><br><span class="line">    Character() = new(<span class="string">'A'</span>, <span class="number">62</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Base.iterate(char::Character, (el, i)=(char.start, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">if</span> i &lt; char.length</span><br><span class="line">        <span class="keyword">return</span> (el, (el+<span class="number">1</span>, i+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nothing</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Base.length(char::Character) = char.length</span><br><span class="line">Base.eltype(::Character) = <span class="built_in">Char</span></span><br></pre></td></tr></table></figure><p><code>iterate()</code> 的輸入是「狀態」，輸出是下一個狀態，而狀態包含兩個物件：要迭代的元素以及順序。因此，會看起來像是這個樣子：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(el1, (el2, i+<span class="number">1</span>)) = iterate(iter, (el1, i))</span><br></pre></td></tr></table></figure><p>特別要說明的是，在輸出的狀態中，需要帶有目前元素的資訊 <code>(el1, (el2, i+1))</code>。如果要結束迴圈，那就回傳 <code>nothing</code>。我們就可以來世試看這個可以迭代輸出 ASCII 碼的 Iterable。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; c = Character()</span><br><span class="line">Character(<span class="string">'A'</span>, <span class="number">62</span>)</span><br><span class="line"></span><br><span class="line">julia&gt; iterate(c)</span><br><span class="line">(<span class="string">'B'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">julia&gt; iterate(c, (<span class="string">'B'</span>, <span class="number">1</span>))</span><br><span class="line">(<span class="string">'C'</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">julia&gt; <span class="keyword">for</span> x <span class="keyword">in</span> c</span><br><span class="line">           println(x)</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">D</span><br><span class="line">E</span><br><span class="line">F</span><br><span class="line">G</span><br><span class="line">H</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>這樣可以有 generator 的好處，而且本身也是一個 iterator。它不需要是一個物件，只要有實作 <code>iterate()</code> 這個 API 的物件就可以使用，所以我們還可以拿來這樣用。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> IterableNumber</span><br><span class="line">    start::<span class="built_in">Int</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Base.iterate(iter::IterableNumber, (el, i)=(iter.start, <span class="number">0</span>)) = i &lt; <span class="literal">Inf</span> ? (el, (el+<span class="number">1</span>, i+<span class="number">1</span>)) : <span class="literal">nothing</span></span><br></pre></td></tr></table></figure><p>這是一個可以自定義起點的可迭代數字，數字可以持續到無限大。你得手動把它停下來！</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; iter = IterableNumber(<span class="number">0</span>)</span><br><span class="line">IterableNumber(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">julia&gt; <span class="keyword">for</span> i <span class="keyword">in</span> iter</span><br><span class="line">           println(i)</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>或是你想做個 sliding window：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> SlidingWindow</span><br><span class="line">    vec::<span class="built_in">Vector</span></span><br><span class="line">    n::<span class="built_in">Int</span></span><br><span class="line">    start::<span class="built_in">SubArray</span></span><br><span class="line"></span><br><span class="line">    SlidingWindow(vec::<span class="built_in">Vector</span>, n) = new(vec, n, view(vec, <span class="number">1</span>:n))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Base.iterate(iter::SlidingWindow, (el, i)=(iter.start, <span class="number">1</span>))</span><br><span class="line">    <span class="literal">e</span> = i + iter.n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">e</span> &lt;= length(iter.vec)</span><br><span class="line">        <span class="keyword">return</span> (el, (view(iter.vec, i:<span class="literal">e</span>), i+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nothing</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這邊用 <code>view(iter.vec, i:e)</code> 做取值的方式，比起用 <code>iter.vec[i:e]</code> 取值來的快很多。<code>iter.vec[i:e]</code> 這種方式會造出一個新的陣列，而 view 不會。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; v = collect(<span class="number">1</span>:<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">julia&gt; sw = SlidingWindow(v, <span class="number">5</span>)</span><br><span class="line">SlidingWindow([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>  …  <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>], <span class="number">5</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">julia&gt; <span class="keyword">for</span> x <span class="keyword">in</span> sw</span><br><span class="line">           println(x)</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line">[<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>這邊介紹了三種迭代的方法，而 iterable 則是目前由 Julia 官方支援的主流方式。除了可以迭代數字以外還可以有其他用途，甚至可以迭代直到無限大的數字。Sliding window 這樣的東西在計算上或是深度學習上是很實用的結構！是不是覺得 Julia 越來越像 functional language 了XD</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天來跟大家介紹 iterator、generator 及 iterable 這三個東西。基本上，大家應該都有用過 for 迴圈，然而很多東西可以放在迴圈的 &lt;code&gt;in&lt;/code&gt; 後方，這樣就可以將裡頭的元素一個一個取出來。但是這是怎做到的呢？&lt;/p&gt;
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Computer Science" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/"/>
    
      <category term="Julialang" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/Julialang/"/>
    
    
  </entry>
  
  <entry>
    <title>One-way ANOVA and sum of squares</title>
    <link href="https://yuehhua.github.io/2020/02/10/one-way-anova-and-sum-of-squares/"/>
    <id>https://yuehhua.github.io/2020/02/10/one-way-anova-and-sum-of-squares/</id>
    <published>2020-02-09T16:01:59.000Z</published>
    <updated>2020-03-05T17:15:31.981Z</updated>
    
    <content type="html"><![CDATA[<p><strong>An</strong>alysis <strong>o</strong>f <strong>va</strong>riance (ANOVA) starts from the analysis of variance which is caught by the model or not. If the variance is modeled, then the variance must be explained by the model, I mean of which is “caught” by the model. If it is not, variance is left unexplained as noises. These two concepts forms <strong>explained variance</strong> (or <strong>between-group variance</strong> in categorical factor) and <strong>unexplained variance</strong> (or <strong>within-group variance</strong> in categorical factor).</p><a id="more"></a><h2 id="Sum-of-squares"><a href="#Sum-of-squares" class="headerlink" title="Sum of squares"></a>Sum of squares</h2><p>Sum of squares come from the concept of calculating the (squared Euclidean) distance among data. Let’s consider the total sum of squares $SS_{total}$.</p><script type="math/tex; mode=display">SS_{total} = \sum_i (y_i - \bar{y})^2</script><p>$y<em>i$ represents the true data value, $\bar{y}$ represents the mean of data $y_i$. We can get variance from $SS</em>{total}$ by dividing the <strong>degree of freedom</strong> ($df$).</p><script type="math/tex; mode=display">\begin{align\*}Var[Y] &= \frac{SS_{total}}{df} \\\\&= \frac{1}{n-1} \sum_i (y_i - \bar{y})^2\end{align\*}</script><p>The equation above shows the relation between sum of square and variance.</p><p>We always attempt to model the phonomena from data. Constructing the hypothesis or model and validate our hypothesis by testing their siginificant. If our model is true, then model must catch some variance and extract information from data for us. If the model is not true, model catch less variance just as the noise does.</p><p>So, we defined two kinds of sum of squares to measure how much variance is caught by model or not. We usually use a regression to model our data, so we have regression sum of square $SS<em>{reg}$, which represents the amount of sum of square explained by model. Sum of square other than regression sum of square is left as residual sum of square $SS</em>{res}$, which represents the amount of sum of square unexplained by model.</p><script type="math/tex; mode=display">SS_{reg} = \sum_i (\hat{y}_i - \bar{y})^2</script><p>$\hat{y}_i$ represents the prediction value given by the model. If the sum of square is modeled, then the distance between the mean and the model prediction is explained by model.</p><script type="math/tex; mode=display">SS_{res} = \sum_i (y_i - \hat{y}_i)^2</script><p>If the sum of square is not modeled, then the distance between the data and the model prediction is left unexplained as noise.</p><p>There is a relationship amoung them. We are going to proof it. However, the tools are not enough to prove it. We need the following two equations:</p><script type="math/tex; mode=display">\sum_i e_i = \sum_i (y_i - \hat{y}_i) = 0</script><script type="math/tex; mode=display">\sum_i \hat{y}_i e_i = 0</script><p>We start from $SS_{total}$.</p><script type="math/tex; mode=display">\begin{align\*}SS_{total} &= \sum_i (y_i - \bar{y})^2 \\\\&= \sum_i (y_i - \hat{y}_i + \hat{y}_i - \bar{y})^2 \\\\&= \sum_i (y_i - \hat{y}_i)^2 + (\hat{y}_i - \bar{y})^2 + 2(y_i - \hat{y}_i)(\hat{y}_i - \bar{y}) \\\\&= \sum_i (y_i - \hat{y}_i)^2 + \sum_i (\hat{y}_i - \bar{y})^2 + 2 \sum_i \hat{y}_i(y_i - \hat{y}_i) - 2\bar{y} \sum_i (y_i - \hat{y}_i) \\\\\end{align\*}</script><script type="math/tex; mode=display">\begin{align\*}SS_{total} &= SS_{reg} + SS_{res} + 2 \sum_i \hat{y}_i e_i - 2\bar{y} \sum_i e_i \\\\&= SS_{reg} + SS_{res}\end{align\*}</script><p>So now we have it! If we face a dataset, assuming that we know nothing about the data, we could only measure the mean and variance about the data.</p><p>Mean tells us the “location” about the data. If I told you the average height of whole people in the class, you prabably could have a idea or even guess <em>where data locate</em>.</p><p>Variance tell us the “range”, or formally “dispersion”, about the dataset. If the variance is large, we have high uncertainty about the data. Sometimes, we even know the mean, we still cannot guess the answer accurately, because we have no idea about <em>what is the scale of data</em>. In some sense, variance is associated with sum of squares(, and it truely is).</p><p>If we know the model in advance, we know the inner structure of phenomena and how the data is generated. That’s why we usually want to model things. If we introduce a model, it can help us extracting the inner structure (or information) from uncertainty. It reduce the uncertainty and give us information.</p><p>The total sum of squares act as the total uncertainty we face, and it can further be decoupled into two parts. If we have a model to help us, model extracts information and represents as regression sum of squares. The rest of uncertainty remains as <strong>residuals</strong>.</p><h2 id="One-way-ANOVA"><a href="#One-way-ANOVA" class="headerlink" title="One-way ANOVA"></a>One-way ANOVA</h2><p>ANOVA is a way to decouple sum of squares so that we can quantify how well the model is.</p><p>We can further make the ANOVA table as follow:</p><script type="math/tex; mode=display">\begin{array}{l c c c}\ & SS & df & MS & F \\\\\hlinemodel & SS_{reg} & k-1 & MS_{reg} & \frac{MS_{reg}}{MS_{res}} \\\\error & SS_{res} & n-k & MS_{res} & \\\\\hlinetotal & SS_{total} & n-1 & MS_{total} & \\\\\end{array}</script><p>Fill in the corresponding cell. Degree of freedom is about how many parameters you used to estimate your model. However, it is not always the case, you may want to read statistics textbook for some theoretical reasons. $k$ is the random variables you used in your model.</p><script type="math/tex; mode=display">MS_{reg} = \frac{SS_{reg}}{k-1} \\\\MS_{res} = \frac{SS_{res}}{n-k}</script><p>$MS$ means <em>mean of squares</em>, which it $SS$ divided by $df$. Moreover, we can calculate the F statistics for F test and the F test itself is so called <strong>one-way ANOVA</strong>.</p><script type="math/tex; mode=display">F = \frac{\text{explained variance}}{\text{unexplained variance}}</script><p>F-value has its own meaning. It measures <em>how much variance is caught by our model</em> (or $MS<em>{reg}$), and it is a relative measurement, so it is divided by <em>the variance not caught by our model</em> (or $MS</em>{res}$). In aonother way, the model can <strong>explained</strong> part of variance, and the rest is left <strong>unexplained</strong>.</p><p>If the model we used is not something like linear regression, rather, we separate data into different categories. We used the following formula:</p><script type="math/tex; mode=display">F = \frac{\text{between-group variance}}{\text{within-group variance}}</script><p>We could further test if the F-value is significant or not.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;An&lt;/strong&gt;alysis &lt;strong&gt;o&lt;/strong&gt;f &lt;strong&gt;va&lt;/strong&gt;riance (ANOVA) starts from the analysis of variance which is caught by the model or not. If the variance is modeled, then the variance must be explained by the model, I mean of which is “caught” by the model. If it is not, variance is left unexplained as noises. These two concepts forms &lt;strong&gt;explained variance&lt;/strong&gt; (or &lt;strong&gt;between-group variance&lt;/strong&gt; in categorical factor) and &lt;strong&gt;unexplained variance&lt;/strong&gt; (or &lt;strong&gt;within-group variance&lt;/strong&gt; in categorical factor).&lt;/p&gt;
    
    </summary>
    
      <category term="Statistics" scheme="https://yuehhua.github.io/categories/Statistics/"/>
    
    
  </entry>
  
  <entry>
    <title>Relationship between variance and pairwise distance</title>
    <link href="https://yuehhua.github.io/2020/02/09/relationship-between-variance-and-pairwise-distance/"/>
    <id>https://yuehhua.github.io/2020/02/09/relationship-between-variance-and-pairwise-distance/</id>
    <published>2020-02-09T14:28:52.000Z</published>
    <updated>2020-02-09T14:28:52.461Z</updated>
    
    <content type="html"><![CDATA[<p>Random variable $X$, we have the variance</p><script type="math/tex; mode=display">\begin{align\*}Var[X] &= \mathbb{E}[(X - \mu)^2] \\\\&= \frac{1}{n} \sum_{i=1}^n (x_i - \mu)^2\end{align\*}</script><a id="more"></a><p>Pairwise (squared Euclidean) distance will be</p><script type="math/tex; mode=display">\begin{align\*}\sum_{i \ne j} d(x_i, x_j) &= \sum_{i=1}^n \sum_{j=i+1}^n (x_i - x_j)^2 \\\\&= \sum_{i=1}^n \sum_{j=i+1}^n ((x_i - \mu) - (x_j - \mu))^2 \\\\&= n \sum_{i=1}^n (x_i - \mu)^2 \\\\&= n^2 \mathbb{E}[(X - \mu)^2] \\\\&= n^2 Var[X]\end{align\*}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Random variable $X$, we have the variance&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{align\*}
Var[X] &amp;= \mathbb{E}[(X - \mu)^2] \\\\
&amp;= \frac{1}{n} \sum_{i=1}^n (x_i - \mu)^2
\end{align\*}&lt;/script&gt;
    
    </summary>
    
      <category term="Statistics" scheme="https://yuehhua.github.io/categories/Statistics/"/>
    
    
  </entry>
  
  <entry>
    <title>程式設計師勝任程度</title>
    <link href="https://yuehhua.github.io/2019/12/11/programmer-competency/"/>
    <id>https://yuehhua.github.io/2019/12/11/programmer-competency/</id>
    <published>2019-12-11T07:08:58.000Z</published>
    <updated>2019-12-11T07:08:58.297Z</updated>
    
    <content type="html"><![CDATA[<p>先前看到了 <a href="http://sijinjoseph.com/programmer-competency-matrix/" target="_blank" rel="noopener">Programmer Competency Matrix</a>，所以就自己幫自己評比一下。</p><ul><li>Computer Science<ul><li>data structures: level 3</li><li>algorithms: level 3</li><li>systems programming: level 2</li></ul></li><li>Software Engineering<ul><li>source code version control: level 3</li><li>build automation: level 2</li><li>automated testing: level 2</li></ul></li><li>Programming<ul><li>problem decomposition: level 3</li><li>systems decomposition: level 2</li><li>communication: level 3</li><li>code organization within a file: level 2</li><li>code organization across files: level 2</li><li>source tree organization: level 3</li><li>code readability: level 3</li><li>defensive coding: level 2</li><li>error handling: level 1</li><li>IDE: level 2</li><li>API: level 1</li><li>frameworks: level 3</li><li>requirements: level 2</li><li>scripting: level 2</li><li>database: level 2</li></ul></li><li>Experience<ul><li>languages with professional experience: level 1~2 (familiar with OO language with functional patterns)</li><li>platforms with professional experience: level 2</li><li>years of professional experience: level 2</li><li>domain knowledge: level 2</li></ul></li><li>Knowledge<ul><li>tool knowledge: level 2</li><li>languages exposed to: level 2~3 (used Prolog before)</li><li>codebase knowledge: level 3 (I started a project before)</li><li>knowledge of upcoming technologies: level 2</li><li>platform internals: level 1~2 (not sure)</li><li>books: level 2 (actually used and read books)</li><li>blogs: level 3 (but not regularly update blog posts)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先前看到了 &lt;a href=&quot;http://sijinjoseph.com/programmer-competency-matrix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Programmer Competency Matrix&lt;/a&gt;，所以就自
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Name binding 與 dispatch</title>
    <link href="https://yuehhua.github.io/2019/12/01/name-binding-and-dispatch/"/>
    <id>https://yuehhua.github.io/2019/12/01/name-binding-and-dispatch/</id>
    <published>2019-12-01T02:49:40.000Z</published>
    <updated>2019-12-01T02:49:40.195Z</updated>
    
    <content type="html"><![CDATA[<p>Name binding 是一個將資料或是程式碼綁定（binding）到識別符（identifiers）的一個過程。一個識別符綁定到一個物件代表這個識別符會參考（reference）某個物件。</p><p>Name binding 在程式語言中式相當重要而複雜的一個議題，而它牽涉到作用域（scope）的問題，物件存在於程式碼的位置（語意）及物件的生命周期（時間）。</p><a id="more"></a><p>一般而言，當物件被去除綁定，那物件將會被垃圾回收（garbage collection）機制給處理掉。</p><p>Name binding 依據時間分為：</p><ul><li>Static binding (or early binding)：在編譯時期（compile time）進行綁定</li><li>Dynamic binding (or late binding)：在執行時期（runtime）進行綁定</li></ul><p>Static binding 的一個經典例子是 C 的函式呼叫，它在編譯時期就將函式內容綁定到識別符上，而無法在執行時期變更。</p><p>Dynamic binding 的一個相對應的例子則是 C++ 的虛擬方法呼叫，由於多型的機制，物件的型別無法在編譯時期得知，所以綁定會在執行時期處理。</p><p>在執行時期，如果識別符變更參考到其他的物件，我們稱為重新綁定（rebinding）。如果是變更識別符指向的物件本身，那麼我們稱為突變（mutation）。</p><p>在這邊提到多型的機制，就不得不去提 dispatch 的機制。一般在物件導向語言中以 dynamic dispatch 為主，表示在多型機制下，方法的選定是由第一個參數的型別來決定。</p><p>Dispatch 是個選擇的問題，而 binding 是個綁定的問題。選擇一定要發生在綁定後。</p><p>Dynamic dispatch 可以是 static binding 也可以是 dynamic binding，但是 dynamic binding 就只能在執行時間做 dispatch 了。</p><p>Dynamic dispatch 一般指 single dispatch，也就是由第一個參數的型別來決定要呼叫哪一個方法。相對也有 multiple dispatch，就會利用所有的參數型的排列組合來決定要呼叫哪一個方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Name binding 是一個將資料或是程式碼綁定（binding）到識別符（identifiers）的一個過程。一個識別符綁定到一個物件代表這個識別符會參考（reference）某個物件。&lt;/p&gt;
&lt;p&gt;Name binding 在程式語言中式相當重要而複雜的一個議題，而它牽涉到作用域（scope）的問題，物件存在於程式碼的位置（語意）及物件的生命周期（時間）。&lt;/p&gt;
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Computer Science" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/"/>
    
      <category term="Compiler" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/Compiler/"/>
    
    
  </entry>
  
  <entry>
    <title>魔術數字</title>
    <link href="https://yuehhua.github.io/2019/09/06/magic-numbers/"/>
    <id>https://yuehhua.github.io/2019/09/06/magic-numbers/</id>
    <published>2019-09-06T06:35:26.000Z</published>
    <updated>2019-09-06T06:35:26.760Z</updated>
    
    <content type="html"><![CDATA[<p>很多人在寫程式的時候會有些壞習慣，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X = rand(3, 4)</span><br><span class="line">for i = 1:3</span><br><span class="line">    for j = 1:4</span><br><span class="line">        X[i, j]</span><br><span class="line">        ...</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>可能多數人看以上這段程式碼並沒有什麼特別的感覺，但是如果要維護的時候就會發現你突然不太理解這段程式碼。</p><p>有人知道這邊的 <code>3</code> 是什麼意思嗎？嗯…或許可以從上下文猜出來是陣列的列數的意思。</p><p>一旦要更改陣列的大小的時候勢必就要更改這些數字，甚至這些數字散落在程式碼的各個角落就會更加頭痛。</p><p>這些數字稱為魔術數字（magic numbers），因為沒有人知道他的意義是什麼！</p><h2 id="解法一：使用常數"><a href="#解法一：使用常數" class="headerlink" title="解法一：使用常數"></a>解法一：使用常數</h2><p>如果這些數字很常被使用到，而且不會在程式中被變更，請使用常數，像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const ROWS = 3</span><br><span class="line">const COLUMNS = 4</span><br><span class="line">X = rand(ROWS, COLUMNS)</span><br><span class="line">for i = 1:ROW</span><br><span class="line">    for j = 1:COLUMNS</span><br><span class="line">        X[i, j]</span><br><span class="line">        ...</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>如此，以後要更改陣列大小只需要更改常數即可，也讓程式碼的可讀性上升。</p><p>如果你的程式會更改到這些數字，那麼就用變數。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rows = 3</span><br><span class="line">columns = 4</span><br><span class="line">X = rand(rows, columns)</span><br><span class="line">for i = 1:rows</span><br><span class="line">    for j = 1:columns</span><br><span class="line">        X[i, j]</span><br><span class="line">        ...</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="解法二：動態"><a href="#解法二：動態" class="headerlink" title="解法二：動態"></a>解法二：動態</h2><p>如果陣列的大小不是事先知道的，或是需要動態取得，那麼可以用 <code>size</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for i = 1:size(X, 1)</span><br><span class="line">    for j = 1:size(X, 2)</span><br><span class="line">        X[i, j]</span><br><span class="line">        ...</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>如此可以用在未知大小的陣列上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多人在寫程式的時候會有些壞習慣，如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Computer Science" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/"/>
    
      <category term="Julialang" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/Julialang/"/>
    
    
      <category term="optimization" scheme="https://yuehhua.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>Julia 的 inbounds</title>
    <link href="https://yuehhua.github.io/2019/09/06/inbounds-in-julia/"/>
    <id>https://yuehhua.github.io/2019/09/06/inbounds-in-julia/</id>
    <published>2019-09-06T03:17:13.000Z</published>
    <updated>2019-09-06T03:17:13.549Z</updated>
    
    <content type="html"><![CDATA[<p>有在做套件開發的開發者們應該不陌生 <code>@inbounds</code> 這個 macro，在很多現代程式語言中也有。</p><p>在存取陣列時，為了安全性與正確性的考量，避免存取到陣列範圍以外的記憶體位置，很多語言都設置了邊界檢查（bounds check）。</p><p>邊界檢查會檢查所存取的索引值是否在陣列的範圍內，但是這樣的檢查會有些微的效能損耗，尤其在迴圈內的情況更有可能被累積而放大，關於 Julia 的 邊界檢查可以參考官方文件 <a href="https://docs.julialang.org/en/v1/devdocs/boundscheck/index.html" target="_blank" rel="noopener">Bounds checking</a>。</p><p>如果可以確定所存取的索引值一定在範圍內，我們就可以把邊界檢查給移除，以加速陣列的存取。如以下範例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = rand(3, 4)</span><br><span class="line">@inbounds for i = 1:size(A, 1)</span><br><span class="line">    println(A[i, :])</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>或是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = rand(3, 4)</span><br><span class="line">for i = 1:size(A, 1)</span><br><span class="line">    @inbounds println(A[i, :])</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><code>@inbounds</code> 會將程式碼區塊中的邊界檢查給移除，可以參考 <code>@inbounds</code> 的<a href="https://docs.julialang.org/en/latest/base/base/#Base.@inbounds" target="_blank" rel="noopener">官方文件</a>。使用時必須注意存取的索引值，否則小則存取的值錯誤，大則可能導致程式崩潰。</p><p>先養成好的索引習慣，再考慮將效能提升，加入 <code>@inbounds</code>。相關的資訊也紀錄在官方的<a href="https://docs.julialang.org/en/latest/manual/performance-tips/#man-performance-annotations-1" target="_blank" rel="noopener">效能建議</a>中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有在做套件開發的開發者們應該不陌生 &lt;code&gt;@inbounds&lt;/code&gt; 這個 macro，在很多現代程式語言中也有。&lt;/p&gt;
&lt;p&gt;在存取陣列時，為了安全性與正確性的考量，避免存取到陣列範圍以外的記憶體位置，很多語言都設置了邊界檢查（bounds check）。&lt;
      
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Computer Science" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/"/>
    
      <category term="Julialang" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/Julialang/"/>
    
    
      <category term="optimization" scheme="https://yuehhua.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>Julia 中的行內函式（inline functions）</title>
    <link href="https://yuehhua.github.io/2019/09/06/inline-functions-in-julia/"/>
    <id>https://yuehhua.github.io/2019/09/06/inline-functions-in-julia/</id>
    <published>2019-09-06T02:34:58.000Z</published>
    <updated>2019-09-06T03:16:32.981Z</updated>
    
    <content type="html"><![CDATA[<p>剛好看到一些跟編譯器相關的議題，所以來紀錄一下。</p><p>在一些語言中會有行內函式（inline function）的設計，使用的話一般會讓程式的效能變好。</p><p>最知名應該是 C 跟 C++ 的 <code>inline</code>。</p><p>Inline function 會在編譯時期直接將函式內容展開到程式碼中，不過展開與否是由編譯器決定的，<code>inline</code> 的標記只是告訴編譯器這個函式可以成為 inline function。</p><p><a href="https://en.wikipedia.org/wiki/Inline_expansion" target="_blank" rel="noopener">Inline expansion</a> 就是編譯時期會由編譯器執行的一個動作，看起來與 macro expansion 相似，但不同的是 macro expansion 是在前處理（preprocessing）時期做的，會直接展開在原始碼裡頭，而 inline expansion 則是在編譯時期做的，會在呼叫位點（call site）直接展開。</p><p>展開後編譯器便可以進行最佳化，執行時，就不需要做函式呼叫，也不會在 function stack 上多配置空間。一般使用在短小的函式上會有好處，在巨大的函式上使用不一定會有好處。然而過多的 inline function 反而可能造成過多的指令快取的消耗，造成反效果。</p><p>在 Julia 中，編譯器會自動偵測哪些函式可以被展開，會自動做 inline expansion。一般短小的函式會自動被編譯器判定要 inline，不過也可以由程式設計師自己指定哪些巨大函式可以 inline，可以參考<a href="https://docs.julialang.org/en/v1.2/base/base/#Base.@inline" target="_blank" rel="noopener">文件]</a>。</p><p>除了 <code>@inline</code> 以外，還有 <code>@noinline</code>。為了避免過多的 inline 反而傷害效能，也可以標記一些短小的函式不要 inline。</p><p>範例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@inline function bigfunc(x)</span><br><span class="line">    ...</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>相關技術：<a href="https://en.wikipedia.org/wiki/Inline_caching" target="_blank" rel="noopener">Inline caching</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;剛好看到一些跟編譯器相關的議題，所以來紀錄一下。&lt;/p&gt;
&lt;p&gt;在一些語言中會有行內函式（inline function）的設計，使用的話一般會讓程式的效能變好。&lt;/p&gt;
&lt;p&gt;最知名應該是 C 跟 C++ 的 &lt;code&gt;inline&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Inl
      
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Computer Science" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/"/>
    
      <category term="Julialang" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/Julialang/"/>
    
    
      <category term="optimization" scheme="https://yuehhua.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>一次開源專案貢獻經驗</title>
    <link href="https://yuehhua.github.io/2019/07/08/opensource-contribution-experience/"/>
    <id>https://yuehhua.github.io/2019/07/08/opensource-contribution-experience/</id>
    <published>2019-07-08T14:08:04.000Z</published>
    <updated>2019-09-06T03:19:49.032Z</updated>
    
    <content type="html"><![CDATA[<p>來分享一下最近貢獻開源專案的小心得，雖然我自己貢獻開源專案的次數跟時間不是很多，不過一個 PR 可以產生不少文字跟討論算是值得紀錄一下的。</p><p>我自己在 Julia 的一個統計相關的專案上發了一個 PR，希望補齊在標準化上的一些功能，並且可以支援一維的陣列標準化。</p><a id="more"></a><p>起初，我只想用最簡單、直接的方式可以相容於原本的 API，並且達到我想要的功能。</p><p>後來專案的審查者希望我將較為底層的功能一起做調整，在不是很情願的情形下，我提出了我認為比較好的修改方案。畢竟動下去等於是整個架構要重新改掉了。</p><p>幾次的來回討論以及確認目標後，我確實需要把這部份的功能全部打掉重做。</p><p>其中包含審查者注意到 Julia 是個 column-major 的語言，原本的 row-major 的計算方式要改掉，以讓效能最大化。要如何處理 API 的更動，無非是加入 deprecation warning，然後還得考慮預設值的問題，在這邊審查者一直無法決定預設值該是什麼。</p><p>再來是，由 API 將資料收進來之後，該如何有效率而優雅地處理資料是個問題。有效率代表程式碼不能有多餘的動作，包含多餘的記憶體耗用、轉置與否。優雅代表 API 底下設計的函式之間的轉換跟呼叫也需要保持簡潔跟可讀性，如函數式程式設計般簡潔，如物件導向般可讀性，不能有重複的程式碼（Don’t repeat yourself, DRY）。像是在 API 下層還要繼續設計 API 一般，直到最底層演算法都要保持這樣的原則，你不會有機會做骯髒的手腳。</p><p>來來回回在 PR 上的討論，一則都會有十行以上的文字。想必工程師最討厭的就是需要不斷地跟別人溝通想法，會不斷有想法拋出去，也不斷地被否決，理由通常都是這麼做不夠簡潔、不夠有可讀性、不夠有效率。</p><p>不過我想我們的目標是一致的，希望貢獻開源專案，無非是將好的東西貢獻到專案上。種種的批評跟新想法都是促進彼此的成長，有時候是我的方法不夠有效率，有時候是審查者的想法無法通過自動測試，這時候他會為他的想法道歉。我也曾經誤解了他的英文，讓他需要再重新解釋一遍。</p><p>很多時候會遇到一些挫折，像是我覺得他這樣做超級蠢，或是我辛辛苦苦改完一個版本上傳，但是對方卻隔了一個禮拜沒有來看。我想除了技術以外，如何跟別人溝通就在這裡展現出重要性。我講講我自己的心法：</p><ol><li><p>開源專案是大家一起討論出來的結果，沒有辦法說是誰的 idea，除非你真的貢獻超級多或是是專案的擁有者。</p></li><li><p>溝通的時候先溝通目的，將目的說明清楚，別讓別人摸不著頭緒或是不斷猜測浪費時間。</p></li><li><p>溝通時請儘量客觀而表達明確，有必要的話，直接寫一個小的例子。</p></li><li><p>不斷來回的議題通常會產生一些負面情緒，請耐著性子跟對方解釋清楚。在做的好的地方不吝給個稱讚或是表情符號。</p></li><li><p>你認為是對的事情就該明確講出來，將事情說明清楚就好，不需要過於強烈的用字。</p></li></ol><p>到目前為止，PR 都還沒 merge，卻已經歷時了兩個月，累積了 93 次的對話，產生了 15 次的 commit。增加了 339 行程式碼，刪除了 112 程式碼，diff 100%，意味著所有程式碼都被我修改過了。不過我想這不會是最後一次，不過會是一次蠻特別的經驗。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;來分享一下最近貢獻開源專案的小心得，雖然我自己貢獻開源專案的次數跟時間不是很多，不過一個 PR 可以產生不少文字跟討論算是值得紀錄一下的。&lt;/p&gt;
&lt;p&gt;我自己在 Julia 的一個統計相關的專案上發了一個 PR，希望補齊在標準化上的一些功能，並且可以支援一維的陣列標準化。&lt;/p&gt;
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Computer Science" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/"/>
    
    
  </entry>
  
  <entry>
    <title>運算 Julia 參數型別上的值</title>
    <link href="https://yuehhua.github.io/2019/05/06/operate-value-in-julia-parametric-type/"/>
    <id>https://yuehhua.github.io/2019/05/06/operate-value-in-julia-parametric-type/</id>
    <published>2019-05-06T05:56:52.000Z</published>
    <updated>2019-09-06T03:19:59.125Z</updated>
    
    <content type="html"><![CDATA[<p>之前介紹過將值放在參數型別上。</p><p>今天來介紹一下如何可以做到類似運算的效果。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> A&#123;T&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">a1 = A&#123;<span class="number">5</span>&#125;()</span><br><span class="line">a2 = A&#123;<span class="number">3</span>&#125;()</span><br></pre></td></tr></table></figure><p>在一些應用場景上會希望將參數欄位上的值做運算，例如加總。</p><p>這時候我們可以這樣做：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Base:+</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> +(::A&#123;T&#125;, ::A&#123;S&#125;) <span class="keyword">where</span> &#123;T, S&#125;</span><br><span class="line">x = T + S</span><br><span class="line"><span class="keyword">return</span> A&#123;x&#125;()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如此一來，就可以簡單搞定囉！</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(a1 + a2)</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A&#123;<span class="number">8</span>&#125;()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前介紹過將值放在參數型別上。&lt;/p&gt;
&lt;p&gt;今天來介紹一下如何可以做到類似運算的效果。&lt;/p&gt;
&lt;figure class=&quot;highlight julia&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Computer Science" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/"/>
    
      <category term="Julialang" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/Julialang/"/>
    
    
  </entry>
  
  <entry>
    <title>彰化行</title>
    <link href="https://yuehhua.github.io/2019/03/11/changhua-with-ning/"/>
    <id>https://yuehhua.github.io/2019/03/11/changhua-with-ning/</id>
    <published>2019-03-10T17:19:06.000Z</published>
    <updated>2019-09-11T12:50:34.574Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter password to read the article" />    <label for="pass">Enter password to read the article</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Private post
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Friends" scheme="https://yuehhua.github.io/categories/My-Style/Friends/"/>
    
    
  </entry>
  
  <entry>
    <title>金錢是最廉價的表達</title>
    <link href="https://yuehhua.github.io/2019/03/01/money-is-the-cheapest-expression/"/>
    <id>https://yuehhua.github.io/2019/03/01/money-is-the-cheapest-expression/</id>
    <published>2019-03-01T04:20:45.000Z</published>
    <updated>2019-05-06T05:59:11.172Z</updated>
    
    <content type="html"><![CDATA[<p>人們常常對自己的親人朋友表達情感。</p><p>很多時候是感謝，有時候是愛慕，有時候是崇敬，表達的方式可以有很多種。</p><a id="more"></a><p>我認為利用金錢來表達這些情感非常的廉價。</p><p>金錢並不包含一個人想表達的情感跟意志。</p><p>除了金錢以外，還有什麼是更珍貴更值得付出，更能表達誠意的。</p><p>是時間，你花時間寫的文字比罐頭簡訊或是七彩的卡片溫暖，花時間做的料理或是點心更能彰顯你對另一半的關愛。</p><p>那些以金錢買來的禮品、請客，比不上更真誠的陪伴跟暢談。</p><p>對我而言，我不會讓摯友跟親人以金錢取代真摯的情感。而那些會接受以金錢表達的，多半是泛泛之交。</p><p>相較起時間的付出，金錢真的非常廉價。我始終不認為金錢可以買到友誼、愛情或是親情。如果有人買到了，那一定無比虛假。不過或許可以用金錢買到專業跟努力。</p><p>現代人生活節奏很快，時間更是珍貴，所以願意付出時間的人才是重視對方的人。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人們常常對自己的親人朋友表達情感。&lt;/p&gt;
&lt;p&gt;很多時候是感謝，有時候是愛慕，有時候是崇敬，表達的方式可以有很多種。&lt;/p&gt;
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Believe。Think。Soul" scheme="https://yuehhua.github.io/categories/My-Style/Believe%E3%80%82Think%E3%80%82Soul/"/>
    
    
  </entry>
  
  <entry>
    <title>神經微分方程（Neural Ordinary Differential Equations）</title>
    <link href="https://yuehhua.github.io/2019/02/24/neural-ode/"/>
    <id>https://yuehhua.github.io/2019/02/24/neural-ode/</id>
    <published>2019-02-24T07:47:10.000Z</published>
    <updated>2019-02-25T16:18:15.950Z</updated>
    
    <content type="html"><![CDATA[<p>這篇被選為 NeurIPS 2018 最佳論文，他將連續的概念帶入了神經網路架構中，並且善用以往解微分方程的方法來做逼近，可以做到跟原方法（倒傳遞）一樣好的程度，而參數使用複雜度卻是常數，更短的訓練時間。</p><h2 id="核心觀念"><a href="#核心觀念" class="headerlink" title="核心觀念"></a>核心觀念</h2><p>概念上來說，就是將神經網路<strong>離散的層</strong>觀念打破，將他貫通成為<strong>連續的層</strong>的網路架構。</p><p>連續和離散的差別來自於倒傳遞的過程：</p><script type="math/tex; mode=display">\mathbb{y}_{t+1} = \mathbb{y}_t - \eta \nabla \mathcal{L}</script><p>其中 $\nabla \mathcal{L}$ 就是梯度的部份，是向量的，然而我們把他簡化成純量來看的話，他不過就是</p><script type="math/tex; mode=display">\frac{d \mathcal{L}}{dt}</script><p>廣義上來說，一個函數的微分，如果是離散的版本就會是</p><script type="math/tex; mode=display">\frac{dy}{dt} = \frac{y(t + \Delta) - y(t)}{\Delta}</script><p>如此一來，所形成的方程式就會是差分方程，然而連續的版本就是</p><script type="math/tex; mode=display">\frac{dy}{dt} = \lim_{\Delta \rightarrow 0} \frac{y(t + \Delta) - y(t)}{\Delta}</script><p>這個所形成的會是微分方程。</p><h2 id="從離散到連續"><a href="#從離散到連續" class="headerlink" title="從離散到連續"></a>從離散到連續</h2><p>我們可以從離散的版本</p><script type="math/tex; mode=display">\frac{dy}{dt} = \frac{y(t + \Delta) - y(t)}{\Delta}</script><p>把他轉成以下的樣貌</p><script type="math/tex; mode=display">y(t + \Delta) = y(t) + \Delta \frac{dy}{dt}</script><p>要將他貫通的話，我們就得由從神經網路的基礎開始，如果是一般的前回饋網路（feed-forward network）當中的隱藏層是像下列這個樣子：</p><script type="math/tex; mode=display">h_{t+1} = f(h_t, \theta)</script><p>我們可以發現像是 ResNet 這類的網路有 skip connection 的設置，所以跟一般的前回饋網路不同</p><script type="math/tex; mode=display">h_{t+1} = h_t + f(h_t, \theta)</script><p>而 RNN 等等有序列概念的模型也有類似的結構，就是會是前一層的結果加上通過 $f$ 運算後的結果，成為下一層的結果。</p><p>這樣的形式跟我們前面提到的形式不謀而合</p><script type="math/tex; mode=display">y(t + \Delta) = y(t) + \Delta \frac{dy}{dt}</script><p>只要我們把 $\Delta = 1$ 代入，就成了</p><script type="math/tex; mode=display">y(t+1) = y(t) + \frac{dy}{dt}</script><p>以下給大家比對一下</p><script type="math/tex; mode=display">h_{t+1} = h_t + f(h_t, \theta) \\\\y(t+1) = y(t) + \frac{dy}{dt}</script><p>也就是，我們可以讓</p><script type="math/tex; mode=display">\frac{dy}{dt} = f(h_t, \theta)</script><p>神奇的事情就發生了！神經網路 $f$ 就可以被我們拿來計算微分 $\frac{dy}{dt}$！</p><p>比較精確的說法是，把神經網路的層 $f$ 拿來逼近微分項，或是說梯度。這樣我們後面就可以用數值方法來逼近解。</p><script type="math/tex; mode=display">y(t + \Delta) = y(t) + \Delta \frac{dy}{dt} \\\\\downarrow \\\\y(t + \Delta) = y(t) + \Delta f(t, h(t), \theta_t)</script><p>要拉成連續的還有一個重要的手段，就是將不同的層 $t$ 從離散的變成連續的，所以作者將 $t$ 做了參數化，將他變成 $f$ 的參數之一，如此一來，就可以在任意的層中放入資料做運算。</p><p>最重要的概念導出了這樣的式子</p><script type="math/tex; mode=display">h(t) \rightarrow \frac{dy(t)}{dt} = f(h(t), t, \theta) \rightarrow y(t)</script><h2 id="神經網路作為一個系統的微分形式"><a href="#神經網路作為一個系統的微分形式" class="headerlink" title="神經網路作為一個系統的微分形式"></a>神經網路作為一個系統的微分形式</h2><p>在傳統科學或是工程領域，我們會以微分式來表達以及建構一個系統。</p><script type="math/tex; mode=display">\nu = \frac{dx}{dt} = t + 1</script><p>其實在這邊是一樣的道理，整體來說，我們是換成用神經網路去描述一個微分式，其實本質上就是這樣。</p><p>原本的層的概念就是用數學函數來建立的，而層與層之間傳遞著計算的結果。</p><script type="math/tex; mode=display">\mathbb{h_1} = \sigma(W_1 \mathbb{x} + \mathbb{b_1}) \\\\\mathbb{y} = \sigma(W_2 \mathbb{h_1} + \mathbb{b_2})</script><p>然而變成連續之後，我們等於是用神經網路中的層去建立跟描繪微分形式。</p><script type="math/tex; mode=display">\frac{d h(t)}{dt} = \sigma(W(t) \mathbb{x}(t) + \mathbb{b(t)}) \\\\\frac{d y(t)}{dt} = \sigma(W(t) \mathbb{h}(t) + \mathbb{b(t)})</script><p>是不是跟如出一轍呢？</p><script type="math/tex; mode=display">\frac{dy(t)}{dt} = f(h(t), t, \theta)</script><h2 id="向前傳遞解微分式"><a href="#向前傳遞解微分式" class="headerlink" title="向前傳遞解微分式"></a>向前傳遞解微分式</h2><p>我們可以來計算看看隱藏層是長什麼樣子的。在隱藏層的微分式中，也是利用隱藏層去計算出來的。</p><script type="math/tex; mode=display">\frac{dh(t)}{dt} = f(h(t), t, \theta)</script><p>基本上，我們只要對上式做積分就可以了。</p><script type="math/tex; mode=display">h(t) = \int f(h(t), t, \theta) dt</script><p>這是一個怎樣的概念呢？我們可以來看看下圖。</p><p><img src="/images/hidden-state1.svg" alt></p><p>我們做積分這件事其實是用 $h(t_0)$ 來推斷 $h(t_1)$ 的，這跟神經網路的向前傳遞是一樣的行為。</p><script type="math/tex; mode=display">h(t_1) = F(h(t), t, \theta) \bigg|_{t=t_0}</script><p>這樣的積分動作，我們可以用 $t_0$ 時間點的資訊來解 $h(t_1)$。</p><p>這樣的解法在程式上就會交由 ODE Solver 去處理。</p><script type="math/tex; mode=display">h(t_1) = ODESolve(h(t_0), t_0, t_1, \theta, f)</script><h2 id="反向傳遞解函數"><a href="#反向傳遞解函數" class="headerlink" title="反向傳遞解函數"></a>反向傳遞解函數</h2><script type="math/tex; mode=display">\mathcal{L}(t_0, t, \theta) = \mathcal{L}(ODESolve(\cdot))</script><script type="math/tex; mode=display">\frac{\partial \mathcal{L}}{\partial h(t)} = -a(t)</script><p>adjoint state</p><script type="math/tex; mode=display">a(t) = \int -a(t)^T \frac{\partial f}{\partial h} dt = - \frac{\partial \mathcal{L}}{\partial h(t)}</script><script type="math/tex; mode=display">a(t) = \int_{t_1}^{t_0} -a(t)^T \frac{\partial f(h(t), t, \theta)}{\partial h(t)} dt</script><p><img src="/images/adjoint-state.svg" alt></p><h2 id="擴充狀態（augmented-state）"><a href="#擴充狀態（augmented-state）" class="headerlink" title="擴充狀態（augmented state）"></a>擴充狀態（augmented state）</h2><p>$\frac{d \theta}{dt} = 0$</p><p>$\frac{dt}{dt} = 1$</p><p>let $\begin{bmatrix}<br>h \\<br>\theta \\<br>t<br>\end{bmatrix}$ be a augmented state</p><p>augmented state function:</p><script type="math/tex; mode=display">f_{aug}(\begin{bmatrix}h \\\\\theta \\\\t\end{bmatrix}) =\begin{bmatrix}f(h(t), t, \theta) \\\\0 \\\\1\end{bmatrix}</script><p>augmented state dynamics:</p><script type="math/tex; mode=display">\frac{d}{dt}\begin{bmatrix}h \\\\\theta \\\\t\end{bmatrix}=f_{aug}(\begin{bmatrix}h \\\\\theta \\\\t\end{bmatrix})</script><p>augmented adjoint state:</p><script type="math/tex; mode=display">\begin{bmatrix}a \\\\a_{\theta} \\\\a_t\end{bmatrix}</script><p>$a = \frac{\partial \mathcal{L}}{\partial h}$</p><p>$a_{\theta} = \frac{\partial \mathcal{L}}{\partial \theta}$</p><p>$a_t = \frac{\partial \mathcal{L}}{\partial t}$</p><script type="math/tex; mode=display">\frac{d a_{aug}}{dt} = -\begin{bmatrix}a \frac{\partial f}{\partial h} \\\\a \frac{\partial f}{\partial \theta} \\\\a \frac{\partial f}{\partial t}\end{bmatrix}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這篇被選為 NeurIPS 2018 最佳論文，他將連續的概念帶入了神經網路架構中，並且善用以往解微分方程的方法來做逼近，可以做到跟原方法（倒傳遞）一樣好的程度，而參數使用複雜度卻是常數，更短的訓練時間。&lt;/p&gt;
&lt;h2 id=&quot;核心觀念&quot;&gt;&lt;a href=&quot;#核心觀念&quot; 
      
    
    </summary>
    
      <category term="Machine Learning" scheme="https://yuehhua.github.io/categories/Machine-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>筆記 - 從向量空間到函數空間</title>
    <link href="https://yuehhua.github.io/2019/02/24/note-of-vector-space-to-function-space/"/>
    <id>https://yuehhua.github.io/2019/02/24/note-of-vector-space-to-function-space/</id>
    <published>2019-02-24T04:54:02.000Z</published>
    <updated>2019-02-24T04:54:02.908Z</updated>
    
    <content type="html"><![CDATA[<p>參考<a href="https://ccjou.wordpress.com/2009/08/18/%E5%BE%9E%E5%B9%BE%E4%BD%95%E5%90%91%E9%87%8F%E7%A9%BA%E9%96%93%E5%88%B0%E5%87%BD%E6%95%B8%E7%A9%BA%E9%96%93/" target="_blank" rel="noopener">從幾何向量空間到函數空間| 線代啟示錄</a>。</p><ol><li>由 $\mathbb{R}^n$ 拓展到 $\mathbb{R}^{\infty}$ 所需俱備的條件是什麼？</li></ol><p>由於一個向量 $\mathbb{v} \in \mathbb{R}^{\infty}$，在無限維度下我們需要考慮一個問題，就是 norm。</p><p>如果這個空間有定義 norm 的話，我們就要考慮他有沒有收斂，也就是 $||\mathbb{v}||^2$ 要存在。</p><p>所以條件就是</p><script type="math/tex; mode=display">||\mathbb{v}||^2 = \sum_{i=1}^{\infty} v_i^2</script><p>要收斂。</p><ol><li>從 $\mathbb{R}^{\infty}$ 無限維度的向量空間再拓展到 $C^{\omega}$ 函數空間，所需要俱備的條件是什麼？</li></ol><p>一個無限維度的向量是一個離散的版本，由剛剛的式子可以看的出來</p><script type="math/tex; mode=display">||\mathbb{v}||^2 = \sum_{i=1}^{\infty} v_i^2</script><p>而一個（解析）函數則是連續的</p><script type="math/tex; mode=display">||f||^2 = \int f^2(x) dx</script><p>除了以上的 norm 要收斂外，從離散到連續應該有些假設或是條件才是。</p><ol><li>函數的基底</li></ol><p>Fourier series</p><script type="math/tex; mode=display">f(x) = a_0 + a_1 \cos x + b_1 \sin x + a_2 \cos 2x + b_2 \sin 2x + \cdots</script><p>所以基底就是</p><script type="math/tex; mode=display"><\beta> = <1, \cos x, \sin x, \cos 2x, \sin 2x, \cdots></script><ol><li>非週期性函數基底</li></ol><p>Legendre polynomial</p><ol><li>Least square problem</li></ol><script type="math/tex; mode=display">(A^TA)\hat{y} = A^Tb</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;參考&lt;a href=&quot;https://ccjou.wordpress.com/2009/08/18/%E5%BE%9E%E5%B9%BE%E4%BD%95%E5%90%91%E9%87%8F%E7%A9%BA%E9%96%93%E5%88%B0%E5%87%BD%E6%95
      
    
    </summary>
    
      <category term="Math" scheme="https://yuehhua.github.io/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>在參數化型別中使用值的效能分析</title>
    <link href="https://yuehhua.github.io/2019/02/22/performance-analysis-of-value-in-parametric-type/"/>
    <id>https://yuehhua.github.io/2019/02/22/performance-analysis-of-value-in-parametric-type/</id>
    <published>2019-02-22T04:24:37.000Z</published>
    <updated>2019-09-06T03:20:20.510Z</updated>
    
    <content type="html"><![CDATA[<p>我在使用的時候有注意到<em>在參數化型別中使用值</em>的方式與<em>傳統封裝</em>的方式有效能上的差異。</p><p>所以我就做了一些測試。</p><p>在參數化型別中使用值：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> A&#123;T&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>傳統型別封裝：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> B</span><br><span class="line">    x::<span class="built_in">Int64</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><em>全文出現的程式碼為實際測試程式碼</em></p><p>因為 Julia 有提供好用的 <code>@code_llvm</code> 及 <code>@code_native</code> 來觀察一行程式碼實際被轉換成 LLVM 或是組合語言的時候會產生多少行的程式碼，藉此我們可以用低階程式碼來評估是否有效率。程式碼的行數愈少是越有效率的。</p><h2 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h2><p>我們來測試一個物件被建立需要多少行的程式碼。</p><h3 id="A-LLVM"><a href="#A-LLVM" class="headerlink" title="A - LLVM"></a>A - LLVM</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@code_llvm</span> A&#123;<span class="number">5</span>&#125;()</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;  @ REPL[1]:3 within `Type'</span></span><br><span class="line"><span class="comment">define nonnull %jl_value_t addrspace(10)* @japi1_Type_12238(%jl_value_t addrspace(10)*, %jl_value_t addrspace(10)**, i32) #0 &#123;</span></span><br><span class="line"><span class="comment">top:</span></span><br><span class="line"><span class="comment">  %3 = alloca %jl_value_t addrspace(10)**, align 8</span></span><br><span class="line"><span class="comment">  store volatile %jl_value_t addrspace(10)** %1, %jl_value_t addrspace(10)*** %3, align 8</span></span><br><span class="line"><span class="comment">  ret %jl_value_t addrspace(10)* addrspacecast (%jl_value_t* inttoptr (i64 140407726014496 to %jl_value_t*) to %jl_value_t addrspace(10)*)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="B-LLVM"><a href="#B-LLVM" class="headerlink" title="B - LLVM"></a>B - LLVM</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@code_llvm</span> B(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;  @ REPL[1]:2 within `Type'</span></span><br><span class="line"><span class="comment">define &#123; i64 &#125; @julia_Type_12221(%jl_value_t addrspace(10)*, i64) &#123;</span></span><br><span class="line"><span class="comment">top:</span></span><br><span class="line"><span class="comment">  %.fca.0.insert = insertvalue &#123; i64 &#125; undef, i64 %1, 0</span></span><br><span class="line"><span class="comment">  ret &#123; i64 &#125; %.fca.0.insert</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="A-Assembly"><a href="#A-Assembly" class="headerlink" title="A - Assembly"></a>A - Assembly</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@code_native</span> A&#123;<span class="number">5</span>&#125;()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; ┌ @ REPL[1]:3 within `Type&apos;</span><br><span class="line">movq%rsi, -8(%rsp)</span><br><span class="line">movabsq$140407726014496, %rax  # imm = 0x7FB338A20020</span><br><span class="line">retq</span><br><span class="line">; └</span><br></pre></td></tr></table></figure><h3 id="B-Assembly"><a href="#B-Assembly" class="headerlink" title="B - Assembly"></a>B - Assembly</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@code_native</span> B(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; ┌ @ REPL[1]:2 within `Type&apos;</span><br><span class="line">movq%rsi, %rax</span><br><span class="line">retq</span><br><span class="line">nopw%cs:(%rax,%rax)</span><br><span class="line">; └</span><br></pre></td></tr></table></figure><h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><p>接著測試從物件當中取值出來的效能。</p><p>定義取值的方法：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get_value(::A&#123;T&#125;) <span class="keyword">where</span> &#123;T&#125; = T</span><br><span class="line">get_value(b::B) = b.x</span><br></pre></td></tr></table></figure><p>事先建立好物件：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = A&#123;<span class="number">5</span>&#125;()</span><br><span class="line">b = B(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="A-LLVM-1"><a href="#A-LLVM-1" class="headerlink" title="A - LLVM"></a>A - LLVM</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@code_llvm</span> get_value(a)</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;  @ REPL[8]:1 within `get_value'</span></span><br><span class="line"><span class="comment">define i64 @julia_get_value_12274() &#123;</span></span><br><span class="line"><span class="comment">top:</span></span><br><span class="line"><span class="comment">  ret i64 5</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="B-LLVM-1"><a href="#B-LLVM-1" class="headerlink" title="B - LLVM"></a>B - LLVM</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@code_llvm</span> get_value(b)</span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;  @ REPL[5]:1 within `get_value'</span></span><br><span class="line"><span class="comment">define i64 @julia_get_value_12630(&#123; i64 &#125; addrspace(11)* nocapture nonnull readonly dereferenceable(8)) &#123;</span></span><br><span class="line"><span class="comment">top:</span></span><br><span class="line"><span class="comment">; ┌ @ sysimg.jl:18 within `getproperty'</span></span><br><span class="line"><span class="comment">   %1 = getelementptr inbounds &#123; i64 &#125;, &#123; i64 &#125; addrspace(11)* %0, i64 0, i32 0</span></span><br><span class="line"><span class="comment">; └</span></span><br><span class="line"><span class="comment">  %2 = load i64, i64 addrspace(11)* %1, align 8</span></span><br><span class="line"><span class="comment">  ret i64 %2</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="A-Assembly-1"><a href="#A-Assembly-1" class="headerlink" title="A - Assembly"></a>A - Assembly</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@code_native</span> get_value(a)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; ┌ @ REPL[8]:1 within `get_value&apos;</span><br><span class="line">movl$5, %eax</span><br><span class="line">retq</span><br><span class="line">nopw%cs:(%rax,%rax)</span><br><span class="line">; └</span><br></pre></td></tr></table></figure><h3 id="B-Assembly-1"><a href="#B-Assembly-1" class="headerlink" title="B - Assembly"></a>B - Assembly</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@code_native</span> get_value(b)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; ┌ @ REPL[5]:1 within `get_value&apos;</span><br><span class="line">movq(%rdi), %rax</span><br><span class="line">retq</span><br><span class="line">nopw%cs:(%rax,%rax)</span><br><span class="line">; └</span><br></pre></td></tr></table></figure><p>給大家參考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我在使用的時候有注意到&lt;em&gt;在參數化型別中使用值&lt;/em&gt;的方式與&lt;em&gt;傳統封裝&lt;/em&gt;的方式有效能上的差異。&lt;/p&gt;
&lt;p&gt;所以我就做了一些測試。&lt;/p&gt;
&lt;p&gt;在參數化型別中使用值：&lt;/p&gt;
&lt;figure class=&quot;highlight julia&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Computer Science" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/"/>
    
      <category term="Julialang" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/Julialang/"/>
    
    
  </entry>
  
  <entry>
    <title>在參數化型別中定義值</title>
    <link href="https://yuehhua.github.io/2019/02/22/define-values-in-parametric-type/"/>
    <id>https://yuehhua.github.io/2019/02/22/define-values-in-parametric-type/</id>
    <published>2019-02-21T17:22:42.000Z</published>
    <updated>2019-09-06T03:21:46.486Z</updated>
    
    <content type="html"><![CDATA[<p>應該不少人看到這個標題會摸不著頭緒到底要做什麼，但是看完 Julia 中常見的程式碼你就會了解了。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>&#123;<span class="built_in">Any</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>有沒有曾經納悶過那個數字 2 到底是怎麼進到參數的位置上的呢？</p><p>參數的位置不是只能放型別（type）嗎？</p><p>這同時也是我困惑已久的問題，就搜尋了一下，果不其然被我找到了方法：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> A&#123;T&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A&#123;<span class="number">5</span>&#125;()</span><br></pre></td></tr></table></figure><p>原來這麼簡單就可以完成了！語法上並沒有限定一定要是<em>型別</em>，要放型別以外的東西似乎是可以的。</p><p>我目前測試了可以的有：Int64、Float64、Complex、Char、Bool、Symbol，所以估計數字應該都是可以的。</p><p>不行的有：String、Array，估計物件或是陣列都是不行的。</p><h2 id="定義範圍"><a href="#定義範圍" class="headerlink" title="定義範圍"></a>定義範圍</h2><p>不過使用上並沒有任何限制會有點危險，所以還是定義一下範圍會比較好，像是：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> A&#123;<span class="literal">I</span>&#125;</span><br><span class="line">    <span class="keyword">function</span> A&#123;<span class="literal">I</span>&#125;() <span class="keyword">where</span> &#123;<span class="literal">I</span>&#125;</span><br><span class="line">        <span class="keyword">isa</span>(<span class="literal">I</span>,<span class="built_in">Integer</span>) || error(<span class="string">"bad parameter"</span>)</span><br><span class="line">        new()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這樣就可以限制參數要是整數的範圍。</p><h2 id="從參數取值"><a href="#從參數取值" class="headerlink" title="從參數取值"></a>從參數取值</h2><p>那我們能不能從型別的參數當中取值呢？</p><p>可以。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_value(::A&#123;<span class="literal">I</span>&#125;) <span class="keyword">where</span> A&#123;<span class="literal">I</span>&#125; = <span class="literal">I</span></span><br></pre></td></tr></table></figure><p>如此一來，我們就可以從型別中拿到值了。</p><h2 id="好處？"><a href="#好處？" class="headerlink" title="好處？"></a>好處？</h2><p>這麼做有什麼好處？</p><p>當你把值的資訊放到型別當中，型別就多了一些資訊可以提供編譯器處理，這對於要自己設計型別階層可是非常好用的。</p><p>例如像是你可以將陣列的長度資訊儲存到型別上，這樣編譯器就可以處理陣列的長度資訊了。</p><p>這樣的程式風格會跟 dependent type language 有些相似了。</p><p>大家可以玩玩看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;應該不少人看到這個標題會摸不著頭緒到底要做什麼，但是看完 Julia 中常見的程式碼你就會了解了。&lt;/p&gt;
&lt;figure class=&quot;highlight julia&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Computer Science" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/"/>
    
      <category term="Julialang" scheme="https://yuehhua.github.io/categories/My-Style/Computer-Science/Julialang/"/>
    
    
  </entry>
  
  <entry>
    <title>Note - Mathematical objects</title>
    <link href="https://yuehhua.github.io/2019/02/06/mathematical-objects/"/>
    <id>https://yuehhua.github.io/2019/02/06/mathematical-objects/</id>
    <published>2019-02-05T16:02:53.000Z</published>
    <updated>2019-02-05T16:02:53.088Z</updated>
    
    <content type="html"><![CDATA[<p>20th century Cantor:</p><blockquote><p>All mathematical objects can be defined as sets.</p></blockquote><p>Fundamentals:</p><ul><li>numbers</li><li>permutations</li><li>partitions</li><li>matrices</li><li>sets</li><li>functions</li><li>relations</li></ul><p>Geometry:</p><ul><li>hexagons</li><li>points</li><li>lines</li><li>triangles</li><li>circles</li><li>spheres</li><li>polyhedra</li><li>topological space</li><li>manifolds</li></ul><p>Algebra:</p><ul><li>groups</li><li>rings</li><li>fields</li><li>lattices</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;20th century Cantor:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All mathematical objects can be defined as sets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fundamentals:&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="Math" scheme="https://yuehhua.github.io/categories/Math/"/>
    
    
  </entry>
  
  <entry>
    <title>生物資訊的初衷</title>
    <link href="https://yuehhua.github.io/2019/02/01/original-intention-to-bioinformatics/"/>
    <id>https://yuehhua.github.io/2019/02/01/original-intention-to-bioinformatics/</id>
    <published>2019-01-31T16:25:47.000Z</published>
    <updated>2019-01-31T16:25:47.679Z</updated>
    
    <content type="html"><![CDATA[<p>受到其他文章的啟發，我也來寫一篇為什麼我踏入生物資訊領域好了。</p><p>受到啟發應該算是從高中的時候說起，高中的時候喜歡數學、物理跟生物。對於數學，喜歡他的抽象及純粹，而物理可以解釋這個世界的法則，對於生物則是一直以來隱隱約約有些感覺的。小時候對於生命現象一直很好奇，對於生物的多樣性感到驚奇，但到了高中卻成了考卷上的考題，我不認為那是我要的。</p><p>還記得高中生物上到下視丘的時候會講到很多不同種的激素調控，我突然覺得這一切的背後似乎有著什麼，我對「調控」產生了興趣。接著到了高中快結束，終於上到近代的生物技術以及 DNA 分子的轉錄轉譯，雖然對當時的我來說有點複雜，但是我喜歡挑戰理解這種複雜的事物，我將他轉化成比較好理解的「設計圖」解釋。DNA 就像是一台車子的整體設計圖，RNA 就是將設計圖的一部份零件複製一份出來，並且製造出蛋白質，也就是真實的零件。理解了這些讓我非常開心。</p><p>大學念了醫學檢驗生物技術，但卻不是我的第一志願，不過我確定我對生物技術是有興趣的，我也非常認真對待我的選擇。在傳統的生物醫學研究都是花了十幾年的時間在研究一個蛋白或是一個基因的功能或是交互作用。</p><p>我大三的某天在逛維基百科（你沒看錯，我會去逛維基百科）被我發現了系統生物學這個領域，看到頁面的當下非常震驚，可以以一個系統的觀點切入生物的議題，那麼就可以不用那麼辛苦的一個基因一個基因研究了。而且系統的概念直接串起了在生化中學到的調控，他不只是 pathway，而是一個複雜的網路，可以藉由網路的調控或是反應機制，讓生物體做出特定的行為。生物體就是個巨大的機械，但是複雜度卻遠高於機械，也不像機構那樣那麼容易理解，很多事情是人類目前還不知道的。</p><p>因為這樣的未知，這樣的複雜，這樣的調控系統，讓我決心研究所要往這個方向走。</p><p>大四的時候有進階生物技術，接觸到定序技術、生物資訊、序列處理的議題。同時雙主修資訊工程，我更享受在資工系的課程當中，雖然他講的是程式、作業系統等等，但是對於（建造）系統的概念始終是保留的。我最有興趣的大概是離散數學、演算法跟訊號與系統了，離散數學中的圖論可以說是非常神妙，而圖論的用途也超級廣，可以拿來 model 很多不同的事物。演算法則是去證明一件事情可以被如何的完成是最快的，這些魔法都來自於數學。訊號與系統講述了如何去探知或是解析一個系統，我們怎麼從一個系統的行為當中去反推這個系統的架構。</p><p>到研究所真正接觸了生物資訊與我的認知相去不遠，不過還是少了點什麼，看了看課程發現了機器學習的課程，也詢問了學長關於這個領域，聽說還蠻推薦的，但是受限於開課時間，就乾脆自己去找了 coursera 上林軒田老師的機器學習課程看，大概一個月左右就把他看完了。看的當下非常開心，學到了跟演算法非常相似的技術，而當時大數據剛開始紅，所以就以這個技術為主軸開始了我的研究。</p><p>殊不知，後來的深度學習的崛起，AI 的爆紅，讓機器學習變得異常的熱門。不過我還是希望繼續做系統生物學，應該說是計算生物學。來把這迷樣的生物系統 model 出來吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;受到其他文章的啟發，我也來寫一篇為什麼我踏入生物資訊領域好了。&lt;/p&gt;
&lt;p&gt;受到啟發應該算是從高中的時候說起，高中的時候喜歡數學、物理跟生物。對於數學，喜歡他的抽象及純粹，而物理可以解釋這個世界的法則，對於生物則是一直以來隱隱約約有些感覺的。小時候對於生命現象一直很好奇，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>溫柔而強大</title>
    <link href="https://yuehhua.github.io/2019/01/19/kindness-and-powerful/"/>
    <id>https://yuehhua.github.io/2019/01/19/kindness-and-powerful/</id>
    <published>2019-01-19T15:07:41.000Z</published>
    <updated>2019-09-11T12:54:30.975Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter password to read the article" />    <label for="pass">Enter password to read the article</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Private post
    
    </summary>
    
      <category term="My Style" scheme="https://yuehhua.github.io/categories/My-Style/"/>
    
      <category term="Friends" scheme="https://yuehhua.github.io/categories/My-Style/Friends/"/>
    
    
  </entry>
  
  <entry>
    <title>The Deterministic Information Bottleneck</title>
    <link href="https://yuehhua.github.io/2019/01/18/deterministic-information-bottleneck/"/>
    <id>https://yuehhua.github.io/2019/01/18/deterministic-information-bottleneck/</id>
    <published>2019-01-18T03:39:06.000Z</published>
    <updated>2019-01-19T16:10:31.676Z</updated>
    
    <content type="html"><![CDATA[<p>在 Information Bottleneck 之後出現了不少驚豔的呼喊，也出現了指出這個方法的缺點及詮釋錯誤。</p><p>在這之後有人專注在確定性這件事上。</p><a id="more"></a><iframe width="560" height="315" src="https://www.youtube.com/embed/-D5b_zCJxrs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><pre class="mermaid">graph LR    X -->|"p(x, y)"|Y    X -->|"q(t|x)"|T    T --- Y    X((X))    Y((Y))    T((T))</pre><p>$T$:</p><ul><li>soft sufficient statistics (for statistics)</li><li>lossy compression (for signal)</li><li>maximally informative clustering (for machine learning)</li></ul><h2 id="IB"><a href="#IB" class="headerlink" title="IB"></a>IB</h2><script type="math/tex; mode=display">min\ \mathcal{L} [q(t|x)] = I(T; X) - \beta I(T; Y), \beta > 0</script><p>$I(T; X)$: compression<br>$I(T; Y)$: relevance</p><p>Markov constraint: $T \leftarrow X \leftrightarrow Y$</p><script type="math/tex; mode=display">q(t|x) = \frac{q(t)}{Z(x, \beta)} exp(- \beta D_{KL} [p(y|x) || q(y|t)])) \\\\q(t) = \sum_x p(x)q(t|x) \\\\q(y|t) = \frac{1}{q(t)} \sum_x p(y|x)q(t|x)p(x)</script><p>$I(T; X)$ from channel coding, rate distortion theory</p><h2 id="DIB"><a href="#DIB" class="headerlink" title="DIB"></a>DIB</h2><script type="math/tex; mode=display">min\ \mathcal{L} [q(t|x)] = H(T) - \beta I(T; Y)</script><p>$H(T)$: penalize coding itself<br>$I(T; Y)$: lead to deterministic $\mathcal{L}_{IB}$</p><script type="math/tex; mode=display">\mathcal{L} _{IB} - \mathcal{L} _{DIB} = I(T; X) - H(T) = -H(T|X)</script><p>$\mathcal{L}_{IB}$: implicit encourage of stochastic</p><h2 id="Generalized-IB"><a href="#Generalized-IB" class="headerlink" title="Generalized IB"></a>Generalized IB</h2><script type="math/tex; mode=display">\mathcal{L}_{\alpha} = H(T) - \alpha H(T|X) - \beta I(Y; T)</script><p>$\alpha = 1 \Rightarrow \mathcal{L} <em>{IB}$: stochastic $\rightarrow$ soft clustering<br>$\alpha = 0 \Rightarrow \mathcal{L} </em>{DIB}$: deterministic $\rightarrow$ hard clustering</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Information Bottleneck 之後出現了不少驚豔的呼喊，也出現了指出這個方法的缺點及詮釋錯誤。&lt;/p&gt;
&lt;p&gt;在這之後有人專注在確定性這件事上。&lt;/p&gt;
    
    </summary>
    
      <category term="Deep Learning" scheme="https://yuehhua.github.io/categories/Deep-Learning/"/>
    
    
  </entry>
  
</feed>
